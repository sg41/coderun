/*
3. Вывести маршрут максимальной стоимости
В левом верхнем углу прямоугольной таблицы размером N×M находится черепашка. В
каждой клетке таблицы записано некоторое число. Черепашка может перемещаться
вправо или вниз, при этом маршрут черепашки заканчивается в правом нижнем углу
таблицы. Подсчитаем сумму чисел, записанных в клетках, через которую проползла
черепашка (включая начальную и конечную клетку). Найдите наибольшее возможное
значение этой суммы и маршрут, на котором достигается эта сумма.

Формат ввода
В первой строке входных данных записаны два натуральных числа N и M, не
превосходящих 100 — размеры таблицы. Далее идет N строк, каждая из которых
содержит M чисел, разделенных пробелами — описание таблицы. Все числа в клетках
таблицы целые и могут принимать значения от 0 до 100.

Формат вывода
Первая строка выходных данных содержит максимальную возможную сумму, вторая —
маршрут, на котором достигается эта сумма. Маршрут выводится в виде
последовательности, которая должна содержать N-1 букву D, означающую
передвижение вниз и M-1 букву R, означающую передвижение направо. Если таких
последовательностей несколько, необходимо вывести ровно одну (любую) из них.

Пример 1
Ввод
5 5
9 9 9 9 9
3 0 0 0 0
9 9 9 9 9
6 6 6 6 8
9 9 9 9 9
Вывод
74
D D R R R R D D
*/
#include <cstdint>
#include <iostream>
#include <vector>

int main() {
  int m, n;
  std::cin >> n >> m;
  std::vector<std::vector<int>> matrix(n, std::vector<int>(m));
  std::vector<std::vector<int>> res(n + 1, std::vector<int>(m + 1, -1));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      std::cin >> matrix[i][j];
    }
  }
  res[0][1] = 0;
  res[1][0] = 0;
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      res[i][j] = matrix[i - 1][j - 1] + std::max(res[i - 1][j], res[i][j - 1]);
    }
  }
  std::cout << res[n][m] << "\n";

  std::vector<char> path;
  for (int i = n, j = m; i > 1 || j > 1;) {
    char letter;
    if (res[i - 1][j] > res[i][j - 1]) {
      letter = 'D';
      i--;
    } else {
      letter = 'R';
      j--;
    }
    path.insert(path.begin(), letter);
  }
  for (auto letter : path) {
    std::cout << letter << " ";
  }
  std::cout << "\n";

  return 0;
}